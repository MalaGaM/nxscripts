#
# AlcoBot - Alcoholicz site bot.
# Copyright (c) 2005-2006 Alcoholicz Scripting Team
#
# Module Name:
#   Tree Tests
#
# Author:
#   neoxed (neoxed@gmail.com) May 12, 2005
#
# Abstract:
#   Implements regression tests for the tree data store library.
#

package require tcltest 2
namespace import -force ::tcltest::*

################################################################################
# Tree::Create                                                                 #
################################################################################

test tree-1.1 {Create command} {
    Tree::Create
} {}

test tree-1.2 {Create command} {
    Tree::Create a b
} {a b}

test tree-1.3 {Create command} {
    list [catch {Tree::Create a b c} msg] $msg
} {1 {unbalanced list}}

test tree-1.4 {Create command} {
    Tree::Create c d a b
} {c d a b}

test tree-1.5 {Create command} {
    Tree::Create some [Tree::Create flag 1] thing [Tree::Create flag 0] blah [Tree::Create flag 1]
} {some {flag 1} thing {flag 0} blah {flag 1}}

################################################################################
# Tree::Exists                                                                 #
################################################################################

test tree-2.1 {Exists command} {
    Tree::Exists {a b} a
} 1

test tree-2.2 {Exists command} {
    Tree::Exists {a b} b
} 0

test tree-2.3 {Exists command} {
    Tree::Exists {a {b c}} a b
} 1

test tree-2.4 {Exists command} {
    Tree::Exists {a {b c}} a c
} 0

test tree-2.5 {Exists command} {
    Tree::Exists {a {b c}} b c
} 0

test tree-2.6 {Exists command} {
    list [catch {Tree::Exists} msg] $msg
} {1 {wrong # args: should be "Tree::Exists tree key args"}}

test tree-2.7 {Exists command} {
    list [catch {Tree::Exists {}} msg] $msg
} {1 {wrong # args: should be "Tree::Exists tree key args"}}

################################################################################
# Tree::Get                                                                    #
################################################################################

test tree-3.1 {Get command} {
    Tree::Get {a b} a
} {b}

test tree-3.2 {Get command} {
    Tree::Get {a b c d} a
} {b}

test tree-3.3 {Get command} {
    Tree::Get {a b c d} c
} {d}

test tree-3.4 {Get command} {
    list [catch {Tree::Get {a b c d} b} msg] $msg
} {1 {key "b" not known in tree}}

test tree-3.5 {Get command} {
    Tree::Get {a {p q r s} b {u v x y}} a p
} {q}

test tree-3.6 {Get command} {
    Tree::Get {a {p q r s} b {u v x y}} a r
} {s}

test tree-3.7 {Get command} {
    Tree::Get {a {p q r s} b {u v x y}} b u
} {v}

test tree-3.8 {Get command} {
    Tree::Get {a {p q r s} b {u v x y}} b x
} {y}

test tree-3.9 {Get command} {
    list [catch {Tree::Get {a {p q r s} b {u v x y}} a z} msg] $msg
} {1 {key "z" not known in tree}}

test tree-3.10 {Get command} {
    list [catch {Tree::Get {a {p q r s} b {u v x y}} c z} msg] $msg
} {1 {key "c" not known in tree}}

test tree-3.11 {Get command} {
    Tree::Get [Tree::Create a b c d] a
} {b}

test tree-3.12 {Get command} {
    list [catch {Tree::Get} msg] $msg
} {1 {wrong # args: should be "Tree::Get tree key args"}}

################################################################################
# Tree::GetQuiet                                                               #
################################################################################

test tree-3.1 {GetQuiet command} {
    Tree::GetQuiet {a b} a
} {b}

test tree-3.2 {GetQuiet command} {
    Tree::GetQuiet {a b c d} a
} {b}

test tree-3.3 {GetQuiet command} {
    Tree::GetQuiet {a b c d} c
} {d}

test tree-3.4 {GetQuiet command} {
    list [catch {Tree::GetQuiet {a b c d} b} msg] $msg
} {0 {}}

test tree-3.5 {GetQuiet command} {
    Tree::GetQuiet {a {p q r s} b {u v x y}} a p
} {q}

test tree-3.6 {GetQuiet command} {
    Tree::GetQuiet {a {p q r s} b {u v x y}} a r
} {s}

test tree-3.7 {GetQuiet command} {
    Tree::GetQuiet {a {p q r s} b {u v x y}} b u
} {v}

test tree-3.8 {GetQuiet command} {
    Tree::GetQuiet {a {p q r s} b {u v x y}} b x
} {y}

test tree-3.9 {GetQuiet command} {
    list [catch {Tree::GetQuiet {a {p q r s} b {u v x y}} a z} msg] $msg
} {0 {}}

test tree-3.10 {GetQuiet command} {
    list [catch {Tree::GetQuiet {a {p q r s} b {u v x y}} c z} msg] $msg
} {0 {}}

test tree-3.11 {GetQuiet command} {
    Tree::GetQuiet [Tree::Create a b c d] a
} {b}

test tree-3.12 {GetQuiet command} {
    list [catch {Tree::GetQuiet} msg] $msg
} {1 {wrong # args: should be "Tree::GetQuiet tree key args"}}

################################################################################
# Tree::Keys                                                                   #
################################################################################

test tree-4.1 {Keys command} {
    Tree::Keys {a b}
} {a}

test tree-4.2 {Keys command} {
    Tree::Keys {c d}
} {c}

test tree-4.3 {Keys command} {
    lsort [Tree::Keys {a b c d}]
} {a c}

test tree-4.4 {Keys command} {
    Tree::Keys {a b c d} a
} {a}

test tree-4.5 {Keys command} {
    Tree::Keys {a b c d} c
} {c}

test tree-4.6 {Keys command} {
    Tree::Keys {a b c d} e
} {}

test tree-4.7 {Keys command} {
    lsort [Tree::Keys {a b c d ca da} c*]
} {c ca}

test tree-4.8 {Keys command} {
    list [catch {Tree::Keys} msg] $msg
} {1 {wrong # args: should be "Tree::Keys tree ?pattern?"}}

test tree-4.9 {Keys command} {
    list [catch {Tree::Keys {} a b} msg] $msg
} {1 {wrong # args: should be "Tree::Keys tree ?pattern?"}}

################################################################################
# Tree::Values                                                                 #
################################################################################

test tree-5.1 {Values command} {
    Tree::Values {a b}
} {b}

test tree-5.2 {Values command} {
    Tree::Values {c d}
} {d}

test tree-5.3 {Values command} {
    lsort [Tree::Values {a b c d}]
} {b d}

test tree-5.4 {Values command} {
    Tree::Values {a b c d} b
} {b}

test tree-5.5 {Values command} {
    Tree::Values {a b c d} d
} {d}

test tree-5.6 {Values command} {
    Tree::Values {a b c d} e
} {}

test tree-5.7 {Values command} {
    lsort [Tree::Values {a b c d ca da} d*]
} {d da}

test tree-5.8 {Values command} {
    list [catch {Tree::Values} msg] $msg
} {1 {wrong # args: should be "Tree::Values tree ?pattern?"}}

test tree-5.9 {Values command} {
    list [catch {Tree::Values {} a b} msg] $msg
} {1 {wrong # args: should be "Tree::Values tree ?pattern?"}}

################################################################################
# Tree::For                                                                    #
################################################################################

test tree-6.1 {For command: syntax} {
    list [catch {Tree::For} msg] $msg
} {1 {wrong # args: should be "Tree::For vars tree body"}}

test tree-6.2 {For command: syntax} {
    list [catch {Tree::For x} msg] $msg
} {1 {wrong # args: should be "Tree::For vars tree body"}}

test tree-6.3 {For command: syntax} {
    list [catch {Tree::For x x} msg] $msg
} {1 {wrong # args: should be "Tree::For vars tree body"}}

test tree-6.4 {For command: syntax} {
    list [catch {Tree::For x x x x} msg] $msg
} {1 {wrong # args: should be "Tree::For vars tree body"}}

test tree-6.5 {For command: syntax} {
    list [catch {Tree::For x x x} msg] $msg
} {1 {must have exactly two variable names}}

test tree-6.6 {For command: syntax} {
    list [catch {Tree::For {x x x} x x} msg] $msg
} {1 {must have exactly two variable names}}

test tree-6.7 {For command: syntax} {
    list [catch {Tree::For "\{x" x x} msg] $msg
} {1 {unmatched open brace in list}}

test tree-6.8 {For command} {
    # This test confirms that [Tree::Keys], [Tree::Values] and [Tree::For]
    # all traverse a tree in the same order.
    set treev {a A b B c C}
    set keys {}
    set values {}
    Tree::For {k v} $treev {
	    lappend keys $k
	    lappend values $v
    }
    set result [expr {$keys eq [Tree::Keys $treev] && $values eq [Tree::Values $treev]}]
    expr {$result ? "YES" : [list "NO" $treev $keys $values]}
} {YES}

test tree-6.9 {For command} {
    Tree::For {k v} {} {
	    error "unexpected execution of 'Tree::For' body"
    }
} {}

test tree-6.10 {For command: script results} {
    set times 0
    Tree::For {k v} {a a b b} {
    	incr times
    	continue
    	error "shouldn't get here"
    }
    set times
} {2}

test tree-6.11 {For command: script results} {
    set times 0
    Tree::For {k v} {a a b b} {
    	incr times
    	break
    	error "shouldn't get here"
    }
    set times
} 1

test tree-6.12 {For command: handle representation loss} {
    set treeVar {a b c d e f g h}
    set keys {}
    set values {}
    Tree::For {k v} $treeVar {
    	if {[llength $treeVar]} {
    	    lappend keys $k
    	    lappend values $v
    	}
    }
    list [lsort $keys] [lsort $values]
} {{a c e g} {b d f h}}

test tree-6.13 {For command: keys are unique and iterated over once only} {
    set treeVar {a1 a a2 b b1 c b2 d foo bar bar foo}
    catch {unset accum}
    array set accum {}
    Tree::For {k v} $treeVar {
	    append accum($k) $v,
    }
    set result [lsort [array names accum]]
    lappend result :
    foreach k $result {
	    catch {lappend result $accum($k)}
    }
    catch {unset accum}
    set result
} {a1 a2 b1 b2 bar foo : a, b, c, d, foo, bar,}

################################################################################
# Tree::Set                                                                    #
################################################################################

test tree-7.1 {Set command} {
    set treeVar {}
    Tree::Set treeVar a x
} {a x}

test tree-7.2 {Set command} {
    set treeVar {a {}}
    Tree::Set treeVar a b x
} {a {b x}}

test tree-7.3 {Set command} {
    set treeVar {a {b {}}}
    Tree::Set treeVar a b c x
} {a {b {c x}}}

test tree-7.4 {Set command} {
    set treeVar {a y}
    Tree::Set treeVar a x
} {a x}

test tree-7.5 {Set command} {
    set treeVar {a {b y}}
    Tree::Set treeVar a b x
} {a {b x}}

test tree-7.6 {Set command} {
    set treeVar {a {b {c y}}}
    Tree::Set treeVar a b c x
} {a {b {c x}}}

test tree-7.7 {Set command: path creation} {
    set treeVar {}
    Tree::Set treeVar a b x
} {a {b x}}

test tree-7.8 {Set command: creates variables} {
    catch {unset treeVar}
    Tree::Set treeVar a x
    set treeVar
} {a x}

test tree-7.9 {Set command: write failure} {
    catch {unset treeVar}
    set treeVar(block) {}
    set result [list [catch {Tree::Set treeVar a x} msg] $msg]
    catch {unset treeVar}
    set result
} {1 {can't read "tree": variable is array}}

test tree-7.10 {Set command: syntax} {
    list [catch {Tree::Set} msg] $msg
} {1 {wrong # args: should be "Tree::Set treeVar key value args"}}

test tree-7.11 {Set command: syntax} {
    list [catch {Tree::Set a} msg] $msg
} {1 {wrong # args: should be "Tree::Set treeVar key value args"}}

test tree-7.12 {Set command: syntax} {
    list [catch {Tree::Set a a} msg] $msg
} {1 {wrong # args: should be "Tree::Set treeVar key value args"}}

################################################################################
# Tree::Unset                                                                  #
################################################################################

test tree-8.1 {Unset command} {
    set treeVar {a b c d}
    Tree::Unset treeVar a
} {c d}

test tree-8.2 {Unset command} {
    set treeVar {a b c d}
    Tree::Unset treeVar c
} {a b}

test tree-8.3 {Unset command} {
    set treeVar {a b}
    Tree::Unset treeVar c
} {a b}

test tree-8.4 {Unset command} {
    set treeVar {a {b c d e}}
    Tree::Unset treeVar a b
} {a {d e}}

test tree-8.5 {Unset command} {
    set treeVar {a b}
    list [catch {Tree::Unset treeVar c d} msg] $msg
} {0 {a b}}

test tree-8.6 {Unset command} {
    catch {unset treeVar}
    list [info exists treeVar] [Tree::Unset treeVar a] [info exists treeVar]
} {0 {} 0}

test tree-8.7 {Unset command} {
    list [catch {Tree::Unset treeVar} msg] $msg
} {1 {wrong # args: should be "Tree::Unset treeVar key args"}}

test tree-8.8 {Unset command: write failure} {
    catch {unset treeVar}
    set treeVar(block) {}
    set result [list [catch {Tree::Unset treeVar a} msg] $msg]
    catch {unset treeVar}
    set result
} {1 {can't read "tree": variable is array}}


::tcltest::cleanupTests
return
