#
# AlcoBot - Alcoholicz site bot.
# Copyright (c) 2005-2006 Alcoholicz Scripting Team
#
# Module Name:
#   Config Tests
#
# Author:
#   neoxed (neoxed@gmail.com) May 15, 2005
#
# Abstract:
#   Implements regression tests for the configuration file library.
#

package require tcltest 2
namespace import -force ::tcltest::*

################################################################################
# config::open                                                                 #
################################################################################

test config-1.1 {config::open: no switches} {
    -match regexp
    -body {
        set handle [config::open test.conf]
        config::close $handle
        set handle
    }
    -result {config\d+}
}

test config-1.2 {config::open: all switches} {
    -match regexp
    -body {
        set handle [config::open test.conf -align 2 -comment {;}]
        config::close $handle
        set handle
    }
    -result {config\d+}
}

test config-1.3 {config::open: no args} {
    list [catch {config::open} msg] $msg
} {1 {wrong # args: should be "config::open filePath args"}}

test config-1.4 {config::open: invalid switches} {
    list [catch {config::open test.conf -fake switch} msg] $msg
} {1 {invalid switch "-fake": must be -align or -comment}}

test config-1.5 {config::open: -align switch} {
    list [catch {config::open test.conf -align a} msg] $msg
} {1 {expected digit but got "a"}}

test config-1.6 {config::open: -align switch} {
    list [catch {config::open test.conf -align -1} msg] $msg
} {1 {expected digit but got "-1"}}

test config-1.7 {config::open: -comment switch} {
    list [catch {config::open test.conf -comment test} msg] $msg
} {1 {invalid comment "test": must be one character}}

test config-1.8 {config::open: -comment switch} {
    list [catch {config::open test.conf -comment ""} msg] $msg
} {1 {invalid comment "": must be one character}}

################################################################################
# config::change                                                               #
################################################################################

test config-2.1 {config::change: no args} {
    list [catch {config::change} msg] $msg
} {1 {wrong # args: should be "config::change handle option args"}}

test config-2.2 {config::change: invalid handle} {
    list [catch {config::change {} a} msg] $msg
} {1 {invalid config handle ""}}

test config-2.3 {config::change: invalid handle} {
    list [catch {config::change configTEST a} msg] $msg
} {1 {invalid config handle "configTEST"}}

test config-2.4 {config::change: invalid switch} {
    set handle [config::open test.conf]
    set result [list [catch {config::change $handle -fake 0} msg] $msg]
    config::close $handle
    set result
} {1 {invalid switch "-fake": must be -align, -comment, or -path}}

test config-2.5 {config::change: invalid switch, no value} {
    set handle [config::open test.conf]
    set result [list [catch {config::change $handle -fake} msg] $msg]
    config::close $handle
    set result
} {1 {invalid switch "-fake": must be -align, -comment, or -path}}

test config-2.6 {config::change: too many args} {
    set handle [config::open test.conf]
    set result [list [catch {config::change $handle -align a b} msg] $msg]
    config::close $handle
    set result
} {1 {wrong # args: must be "config::change handle option ?value?"}}

test config-2.7 {config::change: get -align} {
    set handle [config::open test.conf -align 2]
    set result [config::change $handle -align]
    config::close $handle
    set result
} {2}

test config-2.8 {config::change: set -align} {
    set handle [config::open test.conf -align 1]
    config::change $handle -align 0
    set result [config::change $handle -align]
    config::close $handle
    set result
} {0}

test config-2.9 {config::change: set -align, invalid} {
    set handle [config::open test.conf -align 1]
    set result [list [catch {config::change $handle -align -1} msg] $msg]
    config::close $handle
    set result
} {1 {expected digit but got "-1"}}

test config-2.10 {config::change: get -comment} {
    set handle [config::open test.conf -comment {;}]
    set result [config::change $handle -comment]
    config::close $handle
    set result
} {;}

test config-2.11 {config::change: set -comment} {
    set handle [config::open test.conf -comment {;}]
    config::change $handle -comment {#}
    set result [config::change $handle -comment]
    config::close $handle
    set result
} {#}

test config-2.12 {config::change: set -comment, invalid} {
    set handle [config::open test.conf -comment {;}]
    set result [list [catch {config::change $handle -comment ""} msg] $msg]
    config::close $handle
    set result
} {1 {invalid comment "": must be one character}}

test config-2.13 {config::change: get -path} {
    set handle [config::open other.conf]
    set result [config::change $handle -path]
    config::close $handle
    set result
} {other.conf}

test config-2.14 {config::change: set -path} {
    set handle [config::open test.conf]
    config::change $handle -path other.conf
    set result [config::change $handle -path]
    config::close $handle
    set result
} {other.conf}

################################################################################
# config::close                                                                #
################################################################################

test config-3.1 {config::close: no args} {
    list [catch {config::close} msg] $msg
} {1 {wrong # args: should be "config::close handle"}}

test config-3.2 {config::close: invalid handle} {
    list [catch {config::close {}} msg] $msg
} {1 {invalid config handle ""}}

test config-3.3 {config::close: invalid handle} {
    list [catch {config::close configTEST} msg] $msg
} {1 {invalid config handle "configTEST"}}

test config-3.4 {config::close: closed handle} {
    -match regexp
    -body {
        set handle [config::open test.conf]
        config::close $handle
        list [catch {config::close $handle} msg] $msg
    }
    -result {1 {invalid config handle "config\d+"}}
}

################################################################################
# config::read                                                                 #
################################################################################

test config-4.2 {config::read: no args} {
    list [catch {config::read} msg] $msg
} {1 {wrong # args: should be "config::read handle"}}

test config-4.3 {config::read: invalid handle} {
    list [catch {config::read {}} msg] $msg
} {1 {invalid config handle ""}}

test config-4.4 {config::read: invalid handle} {
    list [catch {config::read configTEST} msg] $msg
} {1 {invalid config handle "configTEST"}}

test config-4.5 {config::read: invalid file} {
    set handle [config::open invalidFile.conf]
    set result [list [catch {config::read $handle} msg] $msg]
    config::close $handle
    set result
} {1 {couldn't open "invalidFile.conf": no such file or directory}}

test config-4.6 {config::read: read file} {
    set handle [config::open test.conf]
    set result [config::read $handle]
    config::close $handle
    set result
} {}

################################################################################
# config::write                                                                #
################################################################################

test config-5.1 {config::write: no args} {
    list [catch {config::write} msg] $msg
} {1 {wrong # args: should be "config::write handle"}}

test config-5.2 {config::write: invalid handle} {
    list [catch {config::write {}} msg] $msg
} {1 {invalid config handle ""}}

test config-5.3 {config::write: invalid handle} {
    list [catch {config::write configTEST} msg] $msg
} {1 {invalid config handle "configTEST"}}

test config-5.4 {config::write: verify write} {
    -setup {set tempFile [makeFile {} temp.conf]}
    -body {
        set origHandle [config::open test.conf]
        config::read $origHandle
        config::change $origHandle -path $tempFile
        config::write $origHandle

        set tempHandle [config::open $tempFile]
        config::read $tempHandle
        foreach section [config::sections $origHandle] {
            ## Verify sections.
            if {![config::exists $tempHandle $section]} {
                error "missing section \"$section\""
            }

            ## Verify keys and values.
            foreach {key value} [config::getex $origHandle $section] {
                if {![config::exists $tempHandle $section $key]} {
                    error "missing key \"$key\""
                }

                set tempValue [config::get $tempHandle $section $key]
                if {$value ne $tempValue} {
                    error "key \"$key\" value \"$value\" does not match \"$tempValue\""
                }
            }
        }

        config::close $origHandle
        config::close $tempHandle
    }
    -cleanup {removeFile $tempFile}
}

################################################################################
# config::keys                                                                 #
################################################################################

test config-6.1 {config::keys: no args} {
    list [catch {config::keys} msg] $msg
} {1 {wrong # args: should be "config::keys handle section ?pattern?"}}

test config-6.2 {config::keys: invalid handle} {
    list [catch {config::keys {} {}} msg] $msg
} {1 {invalid config handle ""}}

test config-6.3 {config::keys: invalid handle} {
    list [catch {config::keys configTEST {}} msg] $msg
} {1 {invalid config handle "configTEST"}}

test config-6.4 {config::keys: verify order} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::keys $handle sectionOne]
    config::close $handle
    set result
} {something empty multiple}

test config-6.5 {config::keys: pattern "s*"} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::keys $handle sectionOne s*]
    config::close $handle
    set result
} {something}

test config-6.6 {config::keys: invalid section} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::keys $handle unknownSection]
    config::close $handle
    set result
} {}

################################################################################
# config::sections                                                             #
################################################################################

test config-7.1 {config::sections: no args} {
    list [catch {config::sections} msg] $msg
} {1 {wrong # args: should be "config::sections handle ?pattern?"}}

test config-7.2 {config::sections: invalid handle} {
    list [catch {config::sections {}} msg] $msg
} {1 {invalid config handle ""}}

test config-7.3 {config::sections: invalid handle} {
    list [catch {config::sections configTEST} msg] $msg
} {1 {invalid config handle "configTEST"}}

test config-7.4 {config::sections: verify order} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::sections $handle]
    config::close $handle
    set result
} {sectionOne sectionTwo \{sectionThree section\ Four\}}

test config-7.5 {config::sections: pattern "*Two"} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::sections $handle *Two]
    config::close $handle
    set result
} {sectionTwo}

test config-7.6 {config::sections: invalid section} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::sections $handle unknownSection]
    config::close $handle
    set result
} {}

################################################################################
# config::exists                                                               #
################################################################################

test config-8.1 {config::exists: no args} {
    list [catch {config::exists} msg] $msg
} {1 {wrong # args: should be "config::exists handle section ?key?"}}

test config-8.2 {config::exists: invalid handle} {
    list [catch {config::exists {} a} msg] $msg
} {1 {invalid config handle ""}}

test config-8.3 {config::exists: invalid handle} {
    list [catch {config::exists configTEST a} msg] $msg
} {1 {invalid config handle "configTEST"}}

test config-8.4 {config::exists: valid section} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::exists $handle sectionOne]
    config::close $handle
    set result
} {1}

test config-8.5 {config::exists: valid section, valid key} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::exists $handle sectionOne something]
    config::close $handle
    set result
} {1}

test config-8.6 {config::exists: invalid section} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::exists $handle unknownSection]
    config::close $handle
    set result
} {0}

test config-8.7 {config::exists: valid section, invalid key} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::exists $handle sectionOne unknownKey]
    config::close $handle
    set result
} {0}

################################################################################
# config::get                                                                  #
################################################################################

test config-9.1 {config::get: no args} {
    list [catch {config::get} msg] $msg
} {1 {wrong # args: should be "config::get handle section key"}}

test config-9.2 {config::get: invalid handle} {
    list [catch {config::get {} a b} msg] $msg
} {1 {invalid config handle ""}}

test config-9.3 {config::get: invalid handle} {
    list [catch {config::get configTEST a b} msg] $msg
} {1 {invalid config handle "configTEST"}}

test config-9.4 {config::get: valid section and valid key} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::get $handle sectionOne something]
    config::close $handle
    set result
} {true}

test config-9.5 {config::get: valid section, valid key (empty)} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::get $handle sectionOne empty]
    config::close $handle
    set result
} {}

test config-9.6 {config::get: valid section, invalid key} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::get $handle sectionOne unknownKey]
    config::close $handle
    set result
} {}

test config-9.7 {config::get: invalid section, invalid key} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::get $handle unknownSection unknownKey]
    config::close $handle
    set result
} {}

################################################################################
# config::getex                                                                #
################################################################################

test config-10.1 {config::getex: no args} {
    list [catch {config::getex} msg] $msg
} {1 {wrong # args: should be "config::getex handle section ?pattern?"}}

test config-10.2 {config::getex: invalid handle} {
    list [catch {config::getex {} a b} msg] $msg
} {1 {invalid config handle ""}}

test config-10.3 {config::getex: invalid handle} {
    list [catch {config::getex configTEST a b} msg] $msg
} {1 {invalid config handle "configTEST"}}

test config-10.4 {config::getex: valid section} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::getex $handle sectionOne]
    config::close $handle
    set result
} {something true empty {} multiple true}

test config-10.5 {config::getex: valid section, pattern "e*"} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::getex $handle sectionOne e*]
    config::close $handle
    set result
} {empty {}}

test config-10.6 {config::getex: invalid section} {
    set handle [config::open test.conf]
    config::read $handle
    set result [config::getex $handle unknownSection]
    config::close $handle
    set result
} {}

################################################################################
# config::set                                                                  #
################################################################################

test config-11.1 {config::set: no args} {
    list [catch {config::set} msg] $msg
} {1 {wrong # args: should be "config::set handle section args"}}

test config-11.2 {config::set: invalid handle} {
    list [catch {config::set {} a b c} msg] $msg
} {1 {invalid config handle ""}}

test config-11.3 {config::set: invalid handle} {
    list [catch {config::set configTEST a b c} msg] $msg
} {1 {invalid config handle "configTEST"}}

test config-11.4 {config::set: arg handling} {
    set handle [config::open test.conf]
    set result [list [catch {config::set $handle a b} msg] $msg]
    config::close $handle
    set result
} {1 {wrong # args: must be "config::set handle section ?key value?"}}

test config-11.5 {config::set: arg handling} {
    set handle [config::open test.conf]
    set result [list [catch {config::set $handle a b c d} msg] $msg]
    config::close $handle
    set result
} {1 {wrong # args: must be "config::set handle section ?key value?"}}

test config-11.6 {config::set: change existing key} {
    set handle [config::open test.conf]
    config::read $handle
    set result [list [config::set $handle sectionOne something false]]
    lappend result [config::exists $handle sectionOne something]
    config::close $handle
    set result
} {false 1}

test config-11.7 {config::set: existing section, new key} {
    set handle [config::open test.conf]
    config::read $handle
    set result [list [config::set $handle sectionOne reallyReallyReallyLongKeyName newValue]]
    lappend result [config::exists $handle sectionOne reallyReallyReallyLongKeyName]
    config::close $handle
    set result
} {newValue 1}

test config-11.8 {config::set: new section} {
    set handle [config::open test.conf]
    config::read $handle
    set result [list [config::set $handle newSection]]
    lappend result [config::exists $handle newSection]
    config::close $handle
    set result
} {{} 1}

test config-11.9 {config::set: new section, new key} {
    set handle [config::open test.conf]
    config::read $handle
    set result [list [config::set $handle newSection newKey newValue]]
    lappend result [config::exists $handle newSection newKey]
    config::close $handle
    set result
} {newValue 1}

################################################################################
# config::unset                                                                #
################################################################################

test config-12.1 {config::unset: no args} {
    list [catch {config::unset} msg] $msg
} {1 {wrong # args: should be "config::unset handle section ?key?"}}

test config-12.2 {config::unset: invalid handle} {
    list [catch {config::unset {} a b} msg] $msg
} {1 {invalid config handle ""}}

test config-12.3 {config::unset: invalid handle} {
    list [catch {config::unset configTEST a b} msg] $msg
} {1 {invalid config handle "configTEST"}}

test config-12.4 {config::unset: remove valid section} {
    set handle [config::open test.conf]
    config::read $handle
    config::unset $handle sectionOne
    set result [config::exists $handle sectionOne]
    config::close $handle
    set result
} {0}

test config-12.5 {config::unset: remove invalid section} {
    set handle [config::open test.conf]
    config::read $handle
    config::unset $handle unknownSection
    set result [config::exists $handle unknownSection]
    config::close $handle
    set result
} {0}

test config-12.6 {config::unset: remove valid key} {
    set handle [config::open test.conf]
    config::read $handle
    config::unset $handle sectionOne something
    set result [config::exists $handle sectionOne something]
    config::close $handle
    set result
} {0}

test config-12.7 {config::unset: remove invalid key} {
    set handle [config::open test.conf]
    config::read $handle
    config::unset $handle sectionOne unknownKey
    set result [config::exists $handle sectionOne unknownKey]
    config::close $handle
    set result
} {0}


::tcltest::cleanupTests
return
