Index: tomcrypt_cfg.h
===================================================================
--- tomcrypt_cfg.h	(.../trunk/ext/libs/tomcrypt)	(revision 507)
+++ tomcrypt_cfg.h	(.../ext/trunk/libs/tomcrypt)	(revision 599)
@@ -7,28 +7,6 @@
 #ifndef TOMCRYPT_CFG_H
 #define TOMCRYPT_CFG_H
 
-/* you can change how memory allocation works ... */
-void *XMALLOC(size_t n);
-void *XREALLOC(void *p, size_t n);
-void *XCALLOC(size_t n, size_t s);
-void XFREE(void *p);
-
-void XQSORT(void *base, size_t nmemb, size_t size, int(*compar)(const void *, const void *));
-
-
-/* change the clock function too */
-clock_t XCLOCK(void);
-
-/* various other functions */
-void *XMEMCPY(void *dest, const void *src, size_t n);
-int   XMEMCMP(const void *s1, const void *s2, size_t n);
-void *XMEMSET(void *s, int c, size_t n);
-
-/* type of argument checking, 0=default, 1=fatal and 2=error+continue, 3=nothing */
-#ifndef ARGTYPE
-   #define ARGTYPE  0
-#endif
-
 /* Controls endianess and size of registers.  Leave uncommented to get platform neutral [slower] code
  *
  * Note: in order to use the optimized macros your platform must support unaligned 32 and 64 bit read/writes.
Index: error_to_string.c
===================================================================
--- error_to_string.c	(.../trunk/ext/libs/tomcrypt)	(revision 507)
+++ error_to_string.c	(.../ext/trunk/libs/tomcrypt)	(revision 599)
@@ -18,40 +18,40 @@
 
 static const char *err_2_str[] =
 {
-   "CRYPT_OK",
-   "CRYPT_ERROR",
-   "Non-fatal 'no-operation' requested.",
+   "success",
+   "generic error",
+   "no-operation requested",
 
-   "Invalid keysize for block cipher.",
-   "Invalid number of rounds for block cipher.",
-   "Algorithm failed test vectors.",
+   "invalid key length for block cipher",
+   "invalid number of rounds for block cipher",
+   "invalid salt length",
+   "algorithm failed test vectors",
 
-   "Buffer overflow.",
-   "Invalid input packet.",
+   "buffer overflow",
+   "invalid input packet",
 
-   "Invalid number of bits for a PRNG.",
-   "Error reading the PRNG.",
+   "invalid number of bits for a PRNG",
+   "error reading the PRNG",
 
-   "Invalid cipher specified.",
-   "Invalid hash specified.",
-   "Invalid PRNG specified.",
+   "invalid cipher specified",
+   "invalid hash specified",
+   "invalid PRNG specified",
 
-   "Out of memory.",
+   "out of memory",
 
-   "Invalid PK key or key type specified for function.",
-   "A private PK key is required.",
+   "invalid PK key or key type specified for function",
+   "a private PK key is required",
 
-   "Invalid argument provided.",
-   "File Not Found",
+   "invalid argument provided",
+   "file not found",
 
-   "Invalid PK type.",
-   "Invalid PK system.",
-   "Duplicate PK key found on keyring.",
-   "Key not found in keyring.",
-   "Invalid sized parameter.",
+   "invalid PK type",
+   "invalid PK system",
+   "duplicate PK key found on keyring",
+   "key not found in keyring",
+   "invalid sized parameter",
 
-   "Invalid size for prime.",
-
+   "invalid size for prime"
 };
 
 /**
@@ -62,7 +62,7 @@
 const char *error_to_string(int err)
 {
    if (err < 0 || err >= (int)(sizeof(err_2_str)/sizeof(err_2_str[0]))) {
-      return "Invalid error code.";
+      return "unknown error";
    } else {
       return err_2_str[err];
    }
Index: tomcrypt_mac.h
===================================================================
--- tomcrypt_mac.h	(.../trunk/ext/libs/tomcrypt)	(revision 507)
+++ tomcrypt_mac.h	(.../ext/trunk/libs/tomcrypt)	(revision 599)
@@ -286,14 +286,15 @@
     int           buflen;
 } pelican_state;
 
-int pelican_init(pelican_state *pelmac, const unsigned char *key, unsigned long keylen);
+int pelican_init(pelican_state *pelmac, int cipher, const unsigned char *key, unsigned long keylen);
 int pelican_process(pelican_state *pelmac, const unsigned char *in, unsigned long inlen);
-int pelican_done(pelican_state *pelmac, unsigned char *out);
+int pelican_done(pelican_state *pelmac, unsigned char *out, unsigned long *outlen);
 int pelican_test(void);
 
-int pelican_memory(const unsigned char *key, unsigned long keylen,
+int pelican_memory(int cipher,
+                   const unsigned char *key, unsigned long keylen,
                    const unsigned char *in, unsigned long inlen,
-                         unsigned char *out);
+                         unsigned char *out, unsigned long *outlen);
 
 #endif
 
Index: cast5.c
===================================================================
--- cast5.c	(.../trunk/ext/libs/tomcrypt)	(revision 507)
+++ cast5.c	(.../ext/trunk/libs/tomcrypt)	(revision 599)
@@ -499,6 +499,7 @@
 }
 #endif
 
+#undef INLINE
 #ifdef _MSC_VER
    #define INLINE __inline
 #else
Index: rng_get_bytes.c
===================================================================
--- rng_get_bytes.c	(.../trunk/ext/libs/tomcrypt)	(revision 507)
+++ rng_get_bytes.c	(.../ext/trunk/libs/tomcrypt)	(revision 599)
@@ -20,9 +20,6 @@
 static unsigned long rng_nix(unsigned char *buf, unsigned long len,
                              void (*callback)(void))
 {
-#ifdef LTC_NO_FILE
-    return 0;
-#else
     FILE *f;
     unsigned long x;
 #ifdef TRY_URANDOM_FIRST
@@ -44,48 +41,10 @@
     x = (unsigned long)fread(buf, 1, (size_t)len, f);
     fclose(f);
     return x;
-#endif /* LTC_NO_FILE */
 }
 
 #endif /* DEVRANDOM */
 
-/* on ANSI C platforms with 100 < CLOCKS_PER_SEC < 10000 */
-#if defined(CLOCKS_PER_SEC)
-
-#define ANSI_RNG
-
-static unsigned long rng_ansic(unsigned char *buf, unsigned long len,
-                               void (*callback)(void))
-{
-   clock_t t1;
-   int l, acc, bits, a, b;
-
-   if (XCLOCKS_PER_SEC < 100 || XCLOCKS_PER_SEC > 10000) {
-      return 0;
-   }
-
-   l = len;
-   bits = 8;
-   acc  = a = b = 0;
-   while (len--) {
-       if (callback != NULL) callback();
-       while (bits--) {
-          do {
-             t1 = XCLOCK(); while (t1 == XCLOCK()) a ^= 1;
-             t1 = XCLOCK(); while (t1 == XCLOCK()) b ^= 1;
-          } while (a == b);
-          acc = (acc << 1) | a;
-       }
-       *buf++ = acc;
-       acc  = 0;
-       bits = 8;
-   }
-   acc = bits = a = b = 0;
-   return l;
-}
-
-#endif
-
 /* Try the Microsoft CSP */
 #ifdef WIN32
 #define _WIN32_WINNT 0x0400
@@ -133,9 +92,6 @@
 #ifdef WIN32
    x = rng_win32(out, outlen, callback); if (x != 0) { return x; }
 #endif
-#ifdef ANSI_RNG
-   x = rng_ansic(out, outlen, callback); if (x != 0) { return x; }
-#endif
    return 0;
 }
 
Index: pelican.c
===================================================================
--- pelican.c	(.../trunk/ext/libs/tomcrypt)	(revision 507)
+++ pelican.c	(.../ext/trunk/libs/tomcrypt)	(revision 599)
@@ -18,23 +18,30 @@
 #ifdef PELICAN
 
 #define ENCRYPT_ONLY
-#include "../../ciphers/aes/aes_tab.c"
+#include "aes_tab.c"
 
 
 /**
    Initialize a Pelican state
    @param pelmac    The Pelican state to initialize
+   @param cipher    The index of the desired cipher, must be AES
    @param key       The secret key
    @param keylen    The length of the secret key (octets)
    @return CRYPT_OK if successful
 */
-int pelican_init(pelican_state *pelmac, const unsigned char *key, unsigned long keylen)
+int pelican_init(pelican_state *pelmac, int cipher, const unsigned char *key, unsigned long keylen)
 {
+    int index;
     int err;
 
     LTC_ARGCHK(pelmac != NULL);
     LTC_ARGCHK(key    != NULL);
 
+   index = find_cipher("aes");
+   if (cipher != index || index < 0) {
+      return CRYPT_INVALID_CIPHER;
+   }
+
 #ifdef LTC_FAST
     if (16 % sizeof(LTC_FAST_TYPE)) {
         return CRYPT_INVALID_ARG;
@@ -136,12 +143,14 @@
   Terminate Pelican MAC
   @param pelmac      The Pelican MAC state
   @param out         [out] The TAG
+  @param outlen [out] The resulting size of the authentication tag
   @return CRYPT_OK on sucess
 */
-int pelican_done(pelican_state *pelmac, unsigned char *out)
+int pelican_done(pelican_state *pelmac, unsigned char *out, unsigned long *outlen)
 {
    LTC_ARGCHK(pelmac  != NULL);
    LTC_ARGCHK(out     != NULL);
+   LTC_ARGCHK(outlen  != NULL);
 
    /* check range */
    if (pelmac->buflen < 0 || pelmac->buflen > 16) {
@@ -155,6 +164,8 @@
    pelmac->state[pelmac->buflen++] ^= 0x80;
    aes_ecb_encrypt(pelmac->state, out, &pelmac->K);
    aes_done(&pelmac->K);
+
+   *outlen = 16;
    return CRYPT_OK;
 }
 
Index: tomcrypt.h
===================================================================
--- tomcrypt.h	(.../trunk/ext/libs/tomcrypt)	(revision 507)
+++ tomcrypt.h	(.../ext/trunk/libs/tomcrypt)	(revision 599)
@@ -33,6 +33,7 @@
 
    CRYPT_INVALID_KEYSIZE,  /* Invalid key size given */
    CRYPT_INVALID_ROUNDS,   /* Invalid number of rounds */
+   CRYPT_INVALID_SALT,     /* Invalid salt given */
    CRYPT_FAIL_TESTVECTOR,  /* Algorithm failed test vectors */
 
    CRYPT_BUFFER_OVERFLOW,  /* Not enough space for output */
Index: pelican_memory.c
===================================================================
--- pelican_memory.c	(.../trunk/ext/libs/tomcrypt)	(revision 507)
+++ pelican_memory.c	(.../ext/trunk/libs/tomcrypt)	(revision 599)
@@ -19,26 +19,34 @@
 
 /**
   Pelican block of memory
+  @param cipher   The index of the desired cipher, must be AES
   @param key      The key for the MAC
   @param keylen   The length of the key (octets)
   @param in       The input to MAC
   @param inlen    The length of the input (octets)
   @param out      [out] The output TAG
+  @param outlen   [out] The resulting size of the authentication tag
   @return CRYPT_OK on success
 */
-int pelican_memory(const unsigned char *key, unsigned long keylen,
+int pelican_memory(int cipher,
+                   const unsigned char *key, unsigned long keylen,
                    const unsigned char *in,  unsigned long inlen,
-                         unsigned char *out)
+                         unsigned char *out, unsigned long *outlen)
 {
    pelican_state *pel;
    int err;
 
-   pel = XMALLOC(sizeof(*pel));
+   LTC_ARGCHK(key    != NULL);
+   LTC_ARGCHK(in     != NULL);
+   LTC_ARGCHK(out    != NULL);
+   LTC_ARGCHK(outlen != NULL);
+
+   pel = XMALLOC(sizeof(pelican_state));
    if (pel == NULL) {
       return CRYPT_MEM;
    }
 
-   if ((err = pelican_init(pel, key, keylen)) != CRYPT_OK) {
+   if ((err = pelican_init(pel, cipher, key, keylen)) != CRYPT_OK) {
       XFREE(pel);
       return err;
    }
@@ -46,7 +54,7 @@
       XFREE(pel);
       return err;
    }
-   err = pelican_done(pel, out);
+   err = pelican_done(pel, out, outlen);
    XFREE(pel);
    return err;
 }
Index: tiger.c
===================================================================
--- tiger.c	(.../trunk/ext/libs/tomcrypt)	(revision 507)
+++ tiger.c	(.../ext/trunk/libs/tomcrypt)	(revision 599)
@@ -555,6 +555,7 @@
     CONST64(0xCD56D9430EA8280E) /* 1020 */, CONST64(0xC12591D7535F5065) /* 1021 */,
     CONST64(0xC83223F1720AEF96) /* 1022 */, CONST64(0xC3A0396F7363A51F) /* 1023 */};
 
+#undef INLINE
 #ifdef _MSC_VER
    #define INLINE __inline
 #else
