#
# AlcoExt - Alcoholicz Tcl extension.
# Copyright (c) 2005 Alcoholicz Scripting Team
#
# Module Name:
#   volume.test
#
# Author:
#   neoxed (neoxed@gmail.com) May 27, 2005
#
# Abstract:
#   Volume command test suite.
#

package require tcltest 2
namespace import -force ::tcltest::*

if {$tcl_platform(platform) eq "windows"} {
    set libFile "AlcoExt*"
} else {
    set libFile "libAlcoExt*"
}
append libFile [info sharedlibextension]

set parentPath [file dirname [file dirname [file normalize [info script]]]]
load [lindex [glob -dir $parentPath -types f $libFile] 0]

namespace import -force ::alcoholicz::*

################################################################################
# volume                                                                       #
################################################################################

test volume-1.1 {volume: no args} {
    list [catch {volume} msg] $msg
} {1 {wrong # args: should be "volume option arg ?arg ...?"}}

test volume-1.2 {volume: one arg} {
    list [catch {volume .} msg] $msg
} {1 {bad option ".": must be info or list}}

test volume-1.3 {volume: invalid option} {
    list [catch {volume . a} msg] $msg
} {1 {bad option ".": must be info or list}}

################################################################################
# volume list                                                                  #
################################################################################

test volume-2.1 {volume list: too many args} {
    list [catch {volume list a b c} msg] $msg
} {1 {bad switch "a": must be -local, -mounts, or -root}}

test volume-2.2 {volume list: default to -root} {
    string equal [volume list] [volume list -root]
} {1}

test volume-2.3 {volume list: -local and -root are the same on win} {win} {
    string equal [volume list -local] [volume list -root]
} {1}

test volume-2.4 {volume list: -root on nix} {unix} {
    # The only "root" path on a UNIX system is "/".
    string equal [volume list -root] "/"
} {1}

test volume-2.5 {volume list: -root only} {
    expr {[llength [volume list -root]] > 0}
} {1}

test volume-2.6 {volume list: all flags} {
    expr {[llength [volume list -local -mounts -root]] > 0}
} {1}

test volume-2.7 {volume list: -mounts result} {
    # If there are mount points are present, make sure the
    # returned list is different from the root volumes list.
    set result 1
    set mounts [volume list -mounts]
    if {[llength $mounts] && $mounts eq [volume list -root]} {
        set result 0
    }
    unset mounts
    set result
} {1}

test volume-2.8 {volume list: invalid switches} {
    list [catch {volume list -fake} msg] $msg
} {1 {bad switch "-fake": must be -local, -mounts, or -root}}

test volume-2.9 {volume list: invalid switches} {
    list [catch {volume list -local -t*st} msg] $msg
} {1 {bad switch "-t*st": must be -local, -mounts, or -root}}

################################################################################
# volume info                                                                  #
################################################################################

set currentVolume [lindex [file split [pwd]] 0]

test volume-3.1 {volume info: no args} {
    list [catch {volume info} msg] $msg
} {1 {wrong # args: should be "volume info volume varName"}}

test volume-3.2 {volume info: too many args} {
    list [catch {volume info a b c} msg] $msg
} {1 {wrong # args: should be "volume info volume varName"}}

test volume-3.3 {volume info: invalid volume} {
    set status [catch {volume info ! volInfo}]
    unset -nocomplain volInfo
    set status
} {1}

test volume-3.4 {volume info: no array elements if function fails} {
    catch {volume info ? volInfo}
    set names [lsort [array names volInfo]]
    unset -nocomplain volInfo
    set names
} {}

test volume-3.5 {volume info: array elements} {
    volume info $currentVolume volInfo
    set names [lsort [array names volInfo]]
    unset -nocomplain volInfo
    set names
} {flags free id length name total type used}

test volume-3.6 {volume info: varName isn't an array} {
    unset -nocomplain test; set test 1
    set result [list [catch {volume info $currentVolume test} msg] $msg]
    unset test
    set result
} {1 {can't set "test(length)": variable isn't array}}

test volume-3.7 {volume info: flags must be in alphabetical order} {
    volume info $currentVolume volInfo
    set result [string equal $volInfo(flags) [lsort $volInfo(flags)]]
    unset -nocomplain volInfo
    set result
} {1}


::tcltest::cleanupTests
return
