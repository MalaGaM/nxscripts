#
# AlcoExt - Alcoholicz Tcl extension.
# Copyright (c) 2005 Alcoholicz Scripting Team
#
# Module Name:
#   compress.test
#
# Author:
#   neoxed (neoxed@gmail.com) August 20, 2005
#
# Abstract:
#   Compress command test suite.
#

package require tcltest 2
namespace import -force ::tcltest::*

if {$tcl_platform(platform) eq "windows"} {
    set libFile "AlcoExt*"
} else {
    set libFile "libAlcoExt*"
}
append libFile [info sharedlibextension]

set parentPath [file dirname [file dirname [file normalize [info script]]]]
load [lindex [glob -dir $parentPath -types f $libFile] 0]

namespace import -force ::alcoholicz::*

################################################################################
# compress                                                                     #
################################################################################

test compress-1.1 {compress: no args} {
    list [catch {compress} msg] $msg
} {1 {wrong # args: should be "compress option arg ?arg ...?"}}

test compress-1.2 {compress: one arg} {
    list [catch {compress .} msg] $msg
} {1 {bad option ".": must be adler32, compact, crc32, expand, or stream}}

test compress-1.3 {compress: invalid option} {
    list [catch {compress . a} msg] $msg
} {1 {bad option ".": must be adler32, compact, crc32, expand, or stream}}

################################################################################
# compress adler32                                                             #
################################################################################

test compress-2.1 {compress adler32: no args} {
    list [catch {compress adler32} msg] $msg
} {1 {wrong # args: should be "compress adler32 data"}}

test compress-2.2 {compress adler32: too many args} {
    list [catch {compress adler32 a b} msg] $msg
} {1 {wrong # args: should be "compress adler32 data"}}

test compress-2.3 {compress crc32: data} {
    format %08X [compress adler32 "test"]
} {045D01C1}

test compress-2.3 {compress crc32: more data} {
    format %08X [compress adler32 [string repeat "\n\\test\r" 100]]
} {191DDBED}

################################################################################
# compress crc32                                                               #
################################################################################

test compress-3.1 {compress crc32: no args} {
    list [catch {compress crc32} msg] $msg
} {1 {wrong # args: should be "compress crc32 data"}}

test compress-3.2 {compress crc32: too many args} {
    list [catch {compress crc32 a b} msg] $msg
} {1 {wrong # args: should be "compress crc32 data"}}

test compress-3.3 {compress crc32: data} {
    format %08X [compress crc32 "test"]
} {D87F7E0C}

test compress-3.3 {compress crc32: more data} {
    format %08X [compress crc32 [string repeat "\n\\test\r" 100]]
} {0B473B80}

################################################################################
# compress compact                                                             #
################################################################################

test compress-4.1 {compress compact: no args} {
    list [catch {compress compact} msg] $msg
} {1 {wrong # args: should be "compress compact ?-level 0-9? format data"}}

test compress-4.2 {compress compact: too many args} {
    list [catch {compress compact a b c} msg] $msg
} {1 {wrong # args: should be "compress compact ?-level 0-9? format data"}}

test compress-4.3 {compress compact: invalid format} {
    list [catch {compress compact . a} msg] $msg
} {1 {bad format ".": must be bzip2, gzip, zlib, or zlib-raw}}

test compress-4.4 {compress compact: -level switch} {
    list [catch {compress compact -level -1 a b} msg] $msg
} {1 {invalid compression level "-1": must be between 0 and 9}}

test compress-4.5 {compress compact: -level switch} {
    list [catch {compress compact -level 10 a b} msg] $msg
} {1 {invalid compression level "10": must be between 0 and 9}}

# Format: bzip2 (TODO)

# Format: gzip
test compress-4.9 {compress compact: gzip, default compression} {
    encode hex [compress compact gzip "test"]
} {1F8B080000000000040B2B492D2E01000C7E7FD804000000}

test compress-4.10 {compress compact: gzip, max compression} {
    encode hex [compress compact -level 9 gzip "test"]
} {1F8B080000000000020B2B492D2E01000C7E7FD804000000}

test compress-4.11 {compress compact: gzip, max compression, more data} {
    encode hex [compress compact -level 9 gzip [string repeat "\\test\t \0" 100]]
} {1F8B080000000000020B8B29492D2EE154608819A547E9511A8306008ADC41F820030000}

# Format: zlib
test compress-4.12 {compress compact: zlib, default compression} {
    encode hex [compress compact zlib "test"]
} {78012B492D2E0100045D01C1}

test compress-4.13 {compress compact: zlib, max compression} {
    encode hex [compress compact -level 9 zlib "test"]
} {78DA2B492D2E0100045D01C1}

test compress-4.14 {compress compact: zlib, max compression, more data} {
    encode hex [compress compact -level 9 zlib [string repeat "\\test\t \0" 100]]
} {78DA8B29492D2EE154608819A547E9511A8306002C3CE2F5}

# Format: zlib-raw
test compress-4.15 {compress compact: zlib-raw, default compression} {
    encode hex [compress compact zlib-raw "test"]
} {2B492D2E0100}

test compress-4.16 {compress compact: zlib-raw, max compression} {
    encode hex [compress compact -level 9 zlib-raw "test"]
} {2B492D2E0100}

test compress-4.17 {compress compact: zlib-raw, max compression, more data} {
    encode hex [compress compact -level 9 zlib-raw [string repeat "\\test\t \0" 100]]
} {8B29492D2EE154608819A547E9511A830600}

################################################################################
# compress expand                                                              #
################################################################################

test compress-5.1 {compress expand: no args} {
    list [catch {compress expand} msg] $msg
} {1 {wrong # args: should be "compress expand format data"}}

test compress-5.2 {compress expand: too many args} {
    list [catch {compress expand a b c} msg] $msg
} {1 {wrong # args: should be "compress expand format data"}}

test compress-5.3 {compress expand: invalid format} {
    list [catch {compress expand . a} msg] $msg
} {1 {bad format ".": must be bzip2, gzip, zlib, or zlib-raw}}

# Format: bzip2 (TODO)

# Format: gzip
test compress-5.8 {compress expand: gzip, no data} {
    list [catch {compress expand gzip {}} msg] $msg
} {1 {unable to expand data: data error}}

test compress-5.9 {compress inflate: gzip, default compression} {
    compress expand gzip [compress compact gzip "test"]
} {test}

test compress-5.10 {compress inflate: gzip, max compression} {
    compress expand gzip [compress compact -level 9 gzip "test"]
} {test}

test compress-5.11 {compress inflate: gzip, max compression, more data} {
    compress expand gzip [compress compact -level 9 gzip [string repeat "\\test\t \0" 100]]
} [string repeat "\\test\t \0" 100]

# Format: zlib
test compress-5.12 {compress expand: zlib, no data} {
    list [catch {compress expand zlib {}} msg] $msg
} {1 {unable to expand data: data error}}

test compress-5.13 {compress inflate: zlib, default compression} {
    compress expand zlib [compress compact zlib "test"]
} {test}

test compress-5.14 {compress inflate: zlib, max compression} {
    compress expand zlib [compress compact -level 9 zlib "test"]
} {test}

test compress-5.15 {compress inflate: zlib, max compression, more data} {
    compress expand zlib [compress compact -level 9 zlib [string repeat "\\test\t \0" 100]]
} [string repeat "\\test\t \0" 100]

# Format: zlib-raw
test compress-5.16 {compress expand: zlib-raw, no data} {
    list [catch {compress expand zlib-raw {}} msg] $msg
} {1 {unable to expand data: data error}}

test compress-5.17 {compress inflate: zlib-raw, default compression} {
    compress expand zlib-raw [compress compact zlib-raw "test"]
} {test}

test compress-5.18 {compress inflate: zlib-raw, max compression} {
    compress expand zlib-raw [compress compact -level 9 zlib-raw "test"]
} {test}

test compress-5.19 {compress inflate: zlib-raw, max compression, more data} {
    compress expand zlib-raw [compress compact -level 9 zlib-raw [string repeat "\\test\t \0" 100]]
} [string repeat "\\test\t \0" 100]

################################################################################
# compress stream                                                              #
################################################################################

test compress-6.1 {compress stream: no args} {
    list [catch {compress stream} msg] $msg
} {1 {wrong # args: should be "compress stream format channel"}}

test compress-6.2 {compress stream: too many args} {
    list [catch {compress stream a b c} msg] $msg
} {1 {wrong # args: should be "compress stream format channel"}}

################################################################################
# stress tests                                                                 #
################################################################################

test compress-7.1 {stress test: bzip2} {
    # TODO
} {}

# Test various input buffer sizes to check for inconsistencies with deflateBound().
test compress-7.2 {stress test: gzip} {
    set buff ""
    for {set i 0} {$i < 2000} {incr i} {
        append buff [format %c [expr {int(rand() * 256)}]]
        set test [compress expand gzip [compress compact -level 9 gzip $buff]]
        if {$test ne $buff} {
            return "gzip: expected [encode hex $buff], got [encode hex $"test"]"
        }
    }
} {}

test compress-7.3 {stress test: zlib} {
    set buff ""
    for {set i 0} {$i < 2000} {incr i} {
        append buff [format %c [expr {int(rand() * 256)}]]
        set test [compress expand zlib [compress compact -level 9 zlib $buff]]
        if {$test ne $buff} {
            return "zlib: expected [encode hex $buff], got [encode hex $"test"]"
        }
    }
} {}

test compress-7.4 {stress test: zlib-raw} {
    set buff ""
    for {set i 0} {$i < 2000} {incr i} {
        append buff [format %c [expr {int(rand() * 256)}]]
        set test [compress expand zlib-raw [compress compact -level 9 zlib-raw $buff]]
        if {$test ne $buff} {
            return "zlib-raw: expected [encode hex $buff], got [encode hex $"test"]"
        }
    }
} {}


::tcltest::cleanupTests
return
