#
# # AlcoExt - Alcoholicz Tcl extension.
# Copyright (c) 2005 Alcoholicz Scripting Team
#
# File Name:
#   zlib.test
#
# Author:
#   neoxed (neoxed@gmail.com) May 25, 2005
#
# Abstract:
#   Zlib command test suite.
#

package require tcltest 2
namespace import -force ::tcltest::*

if {$tcl_platform(platform) eq "windows"} {
    set libFile "AlcoExt*"
} else {
    set libFile "libAlcoExt*"
}
append libFile [info sharedlibextension]

set parentPath [file dirname [file dirname [file normalize [info script]]]]
load [lindex [glob -dir $parentPath -types f $libFile] 0]

namespace import -force ::alcoholicz::*

################################################################################
# zlib                                                                         #
################################################################################

test zlib-1.1 {zlib: no args} {
    list [catch {zlib} msg] $msg
} {1 {wrong # args: should be "zlib option arg ?arg ...?"}}

test zlib-1.2 {zlib: one arg} {
    list [catch {zlib .} msg] $msg
} {1 {bad option ".": must be adler32, compress, crc32, decompress, deflate, gunzip, gzip, or inflate}}

test zlib-1.3 {zlib: invalid option} {
    list [catch {zlib . a} msg] $msg
} {1 {bad option ".": must be adler32, compress, crc32, decompress, deflate, gunzip, gzip, or inflate}}

################################################################################
# zlib adler32                                                                 #
################################################################################

test zlib-2.1 {zlib adler32: no args} {
    list [catch {zlib adler32} msg] $msg
} {1 {wrong # args: should be "zlib adler32 data"}}

test zlib-2.2 {zlib adler32: too many args} {
    list [catch {zlib adler32 a b} msg] $msg
} {1 {wrong # args: should be "zlib adler32 data"}}

test zlib-2.3 {zlib crc32: data} {
    format %08X [zlib adler32 test]
} {045D01C1}

test zlib-2.3 {zlib crc32: more data} {
    format %08X [zlib adler32 [string repeat "\n\\test\r" 100]]
} {191DDBED}

################################################################################
# zlib crc32                                                                   #
################################################################################

test zlib-3.1 {zlib crc32: no args} {
    list [catch {zlib crc32} msg] $msg
} {1 {wrong # args: should be "zlib crc32 data"}}

test zlib-3.2 {zlib crc32: too many args} {
    list [catch {zlib crc32 a b} msg] $msg
} {1 {wrong # args: should be "zlib crc32 data"}}

test zlib-3.3 {zlib crc32: data} {
    format %08X [zlib crc32 test]
} {D87F7E0C}

test zlib-3.3 {zlib crc32: more data} {
    format %08X [zlib crc32 [string repeat "\n\\test\r" 100]]
} {0B473B80}

################################################################################
# zlib deflate                                                                 #
################################################################################

test zlib-4.1 {zlib deflate: no args} {
    list [catch {zlib deflate} msg] $msg
} {1 {wrong # args: should be "zlib deflate ?-level 0-9? data"}}

test zlib-4.2 {zlib deflate: too many args} {
    list [catch {zlib deflate a b} msg] $msg
} {1 {wrong # args: should be "zlib deflate ?-level 0-9? data"}}

test zlib-4.3 {zlib deflate: -level switch} {
    list [catch {zlib deflate -level -1 b} msg] $msg
} {1 {invalid compression level "-1": must be between 0 and 9}}

test zlib-4.4 {zlib deflate: -level switch} {
    list [catch {zlib deflate -level 10 b} msg] $msg
} {1 {invalid compression level "10": must be between 0 and 9}}

test zlib-4.5 {zlib deflate: default compression} {
    encode hex [zlib deflate test]
} {78012B492D2E0100045D01C1}

test zlib-4.6 {zlib deflate: max compression} {
    encode hex [zlib deflate -level 9 test]
} {78DA2B492D2E0100045D01C1}

test zlib-4.7 {zlib deflate: max compression, more data} {
    encode hex [zlib deflate -level 9 [string repeat "\\test\t \0" 100]]
} {78DA8B29492D2EE154608819A547E9511A8306002C3CE2F5}

################################################################################
# zlib inflate                                                                 #
################################################################################

test zlib-5.1 {zlib inflate: no args} {
    list [catch {zlib inflate} msg] $msg
} {1 {wrong # args: should be "zlib inflate data"}}

test zlib-5.2 {zlib inflate: too many args} {
    list [catch {zlib inflate a b} msg] $msg
} {1 {wrong # args: should be "zlib inflate data"}}

test zlib-5.3 {zlib inflate: no data} {
    list [catch {zlib inflate {}} msg] $msg
} {1 {unable to inflate data: data error}}

test zlib-5.4 {zlib inflate: default compression} {
    zlib inflate [zlib deflate test]
} {test}

test zlib-5.5 {zlib inflate: max compression} {
    zlib inflate [zlib deflate -level 9 test]
} {test}

test zlib-5.6 {zlib inflate: max compression, more data} {
    zlib inflate [zlib deflate -level 9 [string repeat "\\test\t \0" 100]]
} [string repeat "\\test\t \0" 100]

################################################################################
# zlib compress                                                                #
################################################################################

test zlib-6.1 {zlib compress: no args} {
    list [catch {zlib compress} msg] $msg
} {1 {wrong # args: should be "zlib compress ?-level 0-9? data"}}

test zlib-6.2 {zlib compress: too many args} {
    list [catch {zlib compress a b} msg] $msg
} {1 {wrong # args: should be "zlib compress ?-level 0-9? data"}}

test zlib-6.3 {zlib compress: -level switch} {
    list [catch {zlib compress -level -1 b} msg] $msg
} {1 {invalid compression level "-1": must be between 0 and 9}}

test zlib-6.4 {zlib compress: -level switch} {
    list [catch {zlib compress -level 10 b} msg] $msg
} {1 {invalid compression level "10": must be between 0 and 9}}

test zlib-6.5 {zlib compress: default compression} {
    encode hex [zlib compress test]
} {2B492D2E0100}

test zlib-6.6 {zlib compress: max compression} {
    encode hex [zlib compress -level 9 test]
} {2B492D2E0100}

test zlib-6.7 {zlib compress: max compression, more data} {
    encode hex [zlib compress -level 9 [string repeat "\\test\t \0" 100]]
} {8B29492D2EE154608819A547E9511A830600}

################################################################################
# zlib decompress                                                              #
################################################################################

test zlib-7.1 {zlib decompress: no args} {
    list [catch {zlib decompress} msg] $msg
} {1 {wrong # args: should be "zlib decompress data"}}

test zlib-7.2 {zlib decompress: too many args} {
    list [catch {zlib decompress a b} msg] $msg
} {1 {wrong # args: should be "zlib decompress data"}}

test zlib-7.3 {zlib decompress: no data} {
    list [catch {zlib decompress {}} msg] $msg
} {1 {unable to decompress data: data error}}

test zlib-7.4 {zlib decompress: default compression} {
    zlib decompress [zlib compress test]
} {test}

test zlib-7.5 {zlib decompress: max compression} {
    zlib decompress [zlib compress -level 9 test]
} {test}

test zlib-7.6 {zlib decompress: max compression, more data} {
    zlib decompress [zlib compress -level 9 [string repeat "\\test\t \0" 100]]
} [string repeat "\\test\t \0" 100]

################################################################################
# zlib gzip                                                                    #
################################################################################

test zlib-7.1 {zlib gzip: no args} {
    list [catch {zlib gzip} msg] $msg
} {1 {wrong # args: should be "zlib gzip ?-level 0-9? data"}}

test zlib-7.2 {zlib gzip: too many args} {
    list [catch {zlib gzip a b} msg] $msg
} {1 {wrong # args: should be "zlib gzip ?-level 0-9? data"}}

test zlib-7.3 {zlib gzip: -level switch} {
    list [catch {zlib gzip -level -1 b} msg] $msg
} {1 {invalid compression level "-1": must be between 0 and 9}}

test zlib-7.4 {zlib gzip: -level switch} {
    list [catch {zlib gzip -level 10 b} msg] $msg
} {1 {invalid compression level "10": must be between 0 and 9}}

test zlib-7.5 {zlib gzip: default compression} {
    encode hex [zlib gzip test]
} {1F8B08000000000004FF2B492D2E01000C7E7FD804000000}

test zlib-7.6 {zlib gzip: max compression} {
    encode hex [zlib gzip -level 9 test]
} {1F8B08000000000002FF2B492D2E01000C7E7FD804000000}

test zlib-7.7 {zlib gzip: max compression, more data} {
    encode hex [zlib gzip -level 9 [string repeat "\\test\t \0" 100]]
} {1F8B08000000000002FF8B29492D2EE154608819A547E9511A8306008ADC41F820030000}

################################################################################
# zlib gunzip                                                                  #
################################################################################

test zlib-8.1 {zlib gunzip: no args} {
    list [catch {zlib gunzip} msg] $msg
} {1 {wrong # args: should be "zlib gunzip data"}}

test zlib-8.2 {zlib gunzip: too many args} {
    list [catch {zlib gunzip a b} msg] $msg
} {1 {wrong # args: should be "zlib gunzip data"}}

test zlib-8.3 {zlib gunzip: no data} {
    list [catch {zlib gunzip {}} msg] $msg
} {1 {unable to gunzip data: data error}}

test zlib-8.4 {zlib gunzip: default compression} {
    zlib gunzip [zlib gzip test]
} {test}

test zlib-8.5 {zlib gunzip: max compression} {
    zlib gunzip [zlib gzip -level 9 test]
} {test}

test zlib-8.6 {zlib gunzip: max compression, more data} {
    zlib gunzip [zlib gzip -level 9 [string repeat "\\test\t \0" 100]]
} [string repeat "\\test\t \0" 100]

################################################################################
# stress tests                                                                 #
################################################################################

# Test various input buffer sizes to check for inconsistencies with deflateBound().

test zlib-9.1 {stress test: deflate/inflate} {
    set buff ""
    for {set i 0} {$i < 2000} {incr i} {
        append buff [format %c [expr {int(rand() * 256)}]]
        set test [zlib inflate [zlib deflate -level 9 $buff]]
        if {$test ne $buff} {
            return "deflate: expected [encode hex $buff], got [encode hex $test]"
        }
    }
} {}

test zlib-9.2 {stress test: compress/decompress} {
    set buff ""
    for {set i 0} {$i < 2000} {incr i} {
        append buff [format %c [expr {int(rand() * 256)}]]
        set test [zlib decompress [zlib compress -level 9 $buff]]
        if {$test ne $buff} {
            return "compress: expected [encode hex $buff], got [encode hex $test]"
        }
    }
} {}

test zlib-9.3 {stress test: gzip/gunzip} {
    set buff ""
    for {set i 0} {$i < 2000} {incr i} {
        append buff [format %c [expr {int(rand() * 256)}]]
        set test [zlib gunzip [zlib gzip -level 9 $buff]]
        if {$test ne $buff} {
            return "gzip: expected [encode hex $buff], got [encode hex $test]"
        }
    }
} {}


::tcltest::cleanupTests
return
