#
# AlcoExt - Alcoholicz Tcl extension.
# Copyright (c) 2005 Alcoholicz Scripting Team
#
# Module Name:
#   ioftpd.test
#
# Author:
#   neoxed (neoxed@gmail.com) Jul 23, 2005
#
# Abstract:
#   ioFTPD interface test suite.
#

package require tcltest 2
namespace import -force ::tcltest::*

if {$tcl_platform(platform) eq "windows"} {
    set libFile "AlcoExt*"
} else {
    set libFile "libAlcoExt*"
}
append libFile [info sharedlibextension]

set currentPath [file dirname [file normalize [info script]]]
set libFile [lindex [glob -dir [file dirname $currentPath] -types f $libFile] 0]
load $libFile

namespace import -force ::alcoholicz::*

# ioFTPD settings (box specific).
set msgWindow "ioFTPD::MessageWindow"

# Check if the message window exists.
if {[catch {ioftpd info $msgWindow io}]} {
    testConstraint msgWndExists 0
} else {
    testConstraint msgWndExists 1
}
unset -nocomplain io

proc GetEtcPath {} {
    global msgWindow
    ioftpd info $msgWindow io
    set rootPath [file dirname [file dirname $io(path)]]
    return [file join $rootPath "etc"]
}

proc UpdateUsers {} {
    global users
    unset -nocomplain users

    set filePath [file join [GetEtcPath] "UserIdTable"]
    set handle [open $filePath r]
    set data [read -nonewline $handle]

    foreach line [split $data "\n"] {
        set line [split [string trim $line] ":"]
        # User:UID:Module
        if {[llength $line] == 3} {
            set users([lindex $line 0]) [lindex $line 1]
        }
    }
    close $handle
}

proc UpdateGroups {} {
    global groups
    unset -nocomplain groups

    set filePath [file join [GetEtcPath] "GroupIdTable"]
    set handle [open $filePath r]
    set data [read -nonewline $handle]

    foreach line [split $data "\n"] {
        set line [split [string trim $line] ":"]
        # Group:GID:Module
        if {[llength $line] == 3} {
            set groups([lindex $line 0]) [lindex $line 1]
        }
    }
    close $handle
}

################################################################################
# ioftpd                                                                       #
################################################################################

test ioftpd-1.1 {ioftpd: no args} {win} {
    list [catch {ioftpd} msg] $msg
} {1 {wrong # args: should be "ioftpd option arg ?arg ...?"}}

test ioftpd-1.2 {ioftpd: one arg} {win} {
    list [catch {ioftpd .} msg] $msg
} {1 {bad option ".": must be group, info, kick, kill, user, or who}}

test ioftpd-1.3 {ioftpd: invalid option} {win} {
    list [catch {ioftpd . a} msg] $msg
} {1 {bad option ".": must be group, info, kick, kill, user, or who}}

################################################################################
# ioftpd group                                                                 #
################################################################################

test ioftpd-2.1 {ioftpd group: no args} {win} {
    list [catch {ioftpd group} msg] $msg
} {1 {wrong # args: should be "ioftpd group option arg ?arg ...?"}}

test ioftpd-2.2 {ioftpd group: invalid sub-option} {win} {
    list [catch {ioftpd group . a b} msg] $msg
} {1 {bad option ".": must be exists, get, set, toid, or toname}}

test ioftpd-2.3 {ioftpd group: exists, valid groups} {win msgWndExists} {
    UpdateGroups
    foreach name [array names groups] {
        if {![ioftpd group exists $msgWindow $name]} {
            return "group \"$name\" does exist"
        }
    }
} {}

test ioftpd-2.4 {ioftpd group: exists, invalid group} {win msgWndExists} {
    ioftpd group exists $msgWindow ""
} {0}

test ioftpd-2.5 {ioftpd group: get, valid group} {win msgWndExists} {
    UpdateGroups
    ioftpd group get $msgWindow [lindex [array names groups] 0]
} {}

test ioftpd-2.6 {ioftpd group: get, invalid group} {win msgWndExists} {
    list [catch {ioftpd group get $msgWindow ""} msg] $msg
} {1 {invalid group name ""}}

test ioftpd-2.7 {ioftpd group: set, valid group} {win msgWndExists} {
    UpdateGroups
    list [catch {ioftpd group set $msgWindow [lindex [array names groups] 0] ""} msg] $msg
} {}

test ioftpd-2.8 {ioftpd group: set, invalid group} {win msgWndExists} {
    list [catch {ioftpd group set $msgWindow "" ""} msg] $msg
} {1 {invalid group name ""}}

test ioftpd-2.9 {ioftpd group: toid, valid groups} {win msgWndExists} {
    UpdateGroups
    foreach name [array names groups] {
        set result [ioftpd group toid $msgWindow $name]
        if {$result != $groups($name)} {
            return "expected $groups($name) for group $name but got $result"
        }
    }
} {}

test ioftpd-2.10 {ioftpd group: toid, invalid group} {win msgWndExists} {
    ioftpd group toid $msgWindow ""
} {-1}

test ioftpd-2.11 {ioftpd group: toname, invalid int} {win msgWndExists} {
    list [catch {ioftpd group toname $msgWindow .} msg] $msg
} {1 {expected integer but got "."}}

test ioftpd-2.12 {ioftpd group: toname, valid groups} {win msgWndExists} {
    UpdateGroups
    foreach name [array names groups] {
        set result [ioftpd group toname $msgWindow $groups($name)]
        if {![string equal $result $name]} {
            return "expected $name for GID $groups($name) but got $result"
        }
    }
} {}

test ioftpd-2.13 {ioftpd group: toname, invalid group} {win msgWndExists} {
    ioftpd group toname $msgWindow -1
} {}

################################################################################
# ioftpd info                                                                  #
################################################################################

test ioftpd-3.1 {ioftpd info: no args} {win} {
    list [catch {ioftpd info} msg] $msg
} {1 {wrong # args: should be "ioftpd info msgWindow varName"}}

test ioftpd-3.2 {ioftpd info: too many args} {win} {
    list [catch {ioftpd info a b c} msg] $msg
} {1 {wrong # args: should be "ioftpd info msgWindow varName"}}

test ioftpd-3.3 {ioftpd info: array elements} {win msgWndExists} {
    ioftpd info $msgWindow io
    set names [lsort [array names io]]
    unset -nocomplain io
    set names
} {path pid time}

test ioftpd-3.4 {ioftpd info: varName isn't an array} {win msgWndExists} {
    unset -nocomplain test; set test 1
    set result [list [catch {ioftpd info $msgWindow test} msg] $msg]
    unset test
    set result
} {1 {can't set "test(path)": variable isn't array}}

################################################################################
# ioftpd kick                                                                  #
################################################################################

test ioftpd-4.1 {ioftpd kick: no args} {win} {
    list [catch {ioftpd kick} msg] $msg
} {1 {wrong # args: should be "ioftpd kick msgWindow uid"}}

test ioftpd-4.2 {ioftpd kick: too many args} {win} {
    list [catch {ioftpd kick a b c} msg] $msg
} {1 {wrong # args: should be "ioftpd kick msgWindow uid"}}

test ioftpd-4.3 {ioftpd kick: invalid int} {win msgWndExists} {
    list [catch {ioftpd kick $msgWindow .} msg] $msg
} {1 {expected integer but got "."}}

################################################################################
# ioftpd kill                                                                  #
################################################################################

test ioftpd-5.1 {ioftpd kill: no args} {win} {
    list [catch {ioftpd kill} msg] $msg
} {1 {wrong # args: should be "ioftpd kill msgWindow cid"}}

test ioftpd-5.2 {ioftpd kill: too many args} {win} {
    list [catch {ioftpd kill a b c} msg] $msg
} {1 {wrong # args: should be "ioftpd kill msgWindow cid"}}

test ioftpd-5.3 {ioftpd kill: invalid int} {win msgWndExists} {
    list [catch {ioftpd kill $msgWindow .} msg] $msg
} {1 {expected integer but got "."}}

################################################################################
# ioftpd user                                                                  #
################################################################################

test ioftpd-6.1 {ioftpd user: no args} {win} {
    list [catch {ioftpd user} msg] $msg
} {1 {wrong # args: should be "ioftpd user option arg ?arg ...?"}}

test ioftpd-6.2 {ioftpd user: invalid sub-option} {win} {
    list [catch {ioftpd user . a b} msg] $msg
} {1 {bad option ".": must be exists, get, set, toid, or toname}}

test ioftpd-6.3 {ioftpd user: exists, valid users} {win msgWndExists} {
    UpdateUsers
    foreach name [array names users] {
        if {![ioftpd user exists $msgWindow $name]} {
            return "user \"$name\" does exist"
        }
    }
} {}

test ioftpd-6.4 {ioftpd user: exists, invalid user} {win msgWndExists} {
    ioftpd user exists $msgWindow ""
} {0}

test ioftpd-6.5 {ioftpd group: get, valid group} {win msgWndExists} {
    UpdateGroups
    ioftpd group get $msgWindow [lindex [array names groups] 0]
} {}

test ioftpd-6.6 {ioftpd group: get, invalid group} {win msgWndExists} {
    list [catch {ioftpd group get $msgWindow ""} msg] $msg
} {1 {invalid group name ""}}

test ioftpd-6.7 {ioftpd group: set, valid group} {win msgWndExists} {
    UpdateGroups
    list [catch {ioftpd group set $msgWindow [lindex [array names groups] 0] ""} msg] $msg
} {}

test ioftpd-6.8 {ioftpd group: set, invalid group} {win msgWndExists} {
    list [catch {ioftpd group set $msgWindow "" ""} msg] $msg
} {1 {invalid group name ""}}

test ioftpd-6.9 {ioftpd user: toid, valid users} {win msgWndExists} {
    UpdateUsers
    foreach name [array names users] {
        set result [ioftpd user toid $msgWindow $name]
        if {$result != $users($name)} {
            return "expected $users($name) for user $name but got $result"
        }
    }
} {}

test ioftpd-6.10 {ioftpd user: toid, invalid user} {win msgWndExists} {
    ioftpd user toid $msgWindow ""
} {-1}

test ioftpd-6.11 {ioftpd user: toname, invalid int} {win msgWndExists} {
    list [catch {ioftpd user toname $msgWindow .} msg] $msg
} {1 {expected integer but got "."}}

test ioftpd-6.12 {ioftpd user: toname, valid users} {win msgWndExists} {
    UpdateUsers
    foreach name [array names users] {
        set result [ioftpd user toname $msgWindow $users($name)]
        if {![string equal $result $name]} {
            return "expected $name for UID $users($name) but got $result"
        }
    }
} {}

test ioftpd-6.13 {ioftpd user: toname, invalid user} {win msgWndExists} {
    ioftpd user toname $msgWindow -1
} {}

################################################################################
# ioftpd who                                                                   #
################################################################################

test ioftpd-7.1 {ioftpd who: no args} {win} {
    list [catch {ioftpd who} msg] $msg
} {1 {wrong # args: should be "ioftpd who msgWindow fields"}}

test ioftpd-7.2 {ioftpd who: too many args} {win} {
    list [catch {ioftpd who a b c} msg] $msg
} {1 {wrong # args: should be "ioftpd who msgWindow fields"}}

test ioftpd-7.3 {ioftpd who: invalid field} {win msgWndExists} {
    list [catch {ioftpd who $msgWindow .} msg] $msg
} {1 {bad field ".": must be action, cid, gid, group, host, ident, idletime, ip, logintime, port, realdatapath, realpath, size, speed, status, uid, user, vdatapath, or vpath}}

test ioftpd-7.4 {ioftpd who: check fields} {win msgWndExists} {
    set fields {action cid gid group host ident idletime ip logintime port realdatapath realpath size speed status uid user vdatapath vpath}
    set fieldCount [llength $fields]
    set result ""

    for {set i 0} {$i < $fieldCount} {incr i} {
        set getFields [lrange $fields 0 $i]
        set data [ioftpd who $msgWindow $getFields]
        foreach user $data {
            if {[llength $user] != [llength $getFields]} {
                set result "expected fields \"$getFields\" but got \"$user\""
                break
            }
        }
    }
    unset -nocomplain data user
    set result
} {}


unset -nocomplain users groups
::tcltest::cleanupTests
return
